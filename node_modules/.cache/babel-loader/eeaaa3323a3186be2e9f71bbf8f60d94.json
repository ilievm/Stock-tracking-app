{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\trying canvas from 0(map sized)\\\\stock_app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\trying canvas from 0(map sized)\\\\stock_app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n// mb define apikey\nvar Stock = {\n  fetchStock: function () {\n    var _fetchStock = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(name) {\n      var stockObject, pointerToThis, API_KEY, API_Call, stockChartXValuesFunction, stockChartYValuesFunction;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              stockObject = {\n                type: \"line\",\n                showInLegend: true,\n                name: '',\n                dataPoints: []\n              };\n              pointerToThis = this; // console.log(pointerToThis);\n\n              API_KEY = '740WRQPFQK10PTAG';\n              API_Call = \"https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=\".concat(name, \"&apikey=\").concat(API_KEY);\n              stockChartXValuesFunction = [];\n              stockChartYValuesFunction = [];\n              _context.next = 8;\n              return fetch(API_Call).then(function (response) {\n                return response.json();\n              })\n              /* actually fetching data */\n              .then(function (data) {\n                stockObject.name = data['Meta Data'][\"2. Symbol\"];\n\n                for (var key in data['Monthly Adjusted Time Series']) {\n                  stockChartXValuesFunction.push(key);\n                  stockChartYValuesFunction.push(Math.floor(Number(data['Monthly Adjusted Time Series'][key]['5. adjusted close'])));\n                } // pushing them in the state\n\n\n                for (var i = stockChartXValuesFunction.length; i >= 0; i--) {\n                  stockObject.dataPoints.push({\n                    y: stockChartYValuesFunction[i],\n                    label: stockChartXValuesFunction[i]\n                  });\n                }\n              });\n\n            case 8:\n              return _context.abrupt(\"return\", stockObject);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function fetchStock(_x) {\n      return _fetchStock.apply(this, arguments);\n    }\n\n    return fetchStock;\n  }()\n};\nexport default Stock;","map":{"version":3,"sources":["C:\\Users\\misha\\Desktop\\site\\trying\\STOCK_APP\\trying canvas from 0(map sized)\\stock_app\\src\\views\\userInputFunction\\userInputFunction.jsx"],"names":["Stock","fetchStock","name","stockObject","type","showInLegend","dataPoints","pointerToThis","API_KEY","API_Call","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","data","key","push","Math","floor","Number","i","length","y","label"],"mappings":";;AAAA;AAEA,IAAMA,KAAK,GAAG;AACIC,EAAAA,UADJ;AAAA;AAAA;AAAA,8CACeC,IADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAEMC,cAAAA,WAFN,GAEkB;AACZC,gBAAAA,IAAI,EAAE,MADM;AAEZC,gBAAAA,YAAY,EAAE,IAFF;AAGZH,gBAAAA,IAAI,EAAE,EAHM;AAIZI,gBAAAA,UAAU,EAAE;AAJA,eAFlB;AAQQC,cAAAA,aARR,GAQwB,IARxB,EASE;;AACMC,cAAAA,OAVR,GAUkB,kBAVlB;AAWMC,cAAAA,QAXN,4FAWmGP,IAXnG,qBAWkHM,OAXlH;AAYME,cAAAA,yBAZN,GAYkC,EAZlC;AAaMC,cAAAA,yBAbN,GAakC,EAblC;AAAA;AAAA,qBAeQC,KAAK,CAACH,QAAD,CAAL,CACLI,IADK,CAEF,UAASC,QAAT,EAAmB;AACnB,uBAAOA,QAAQ,CAACC,IAAT,EAAP;AACC,eAJC;AAKJ;AALI,eAMLF,IANK,CAOF,UAASG,IAAT,EAAe;AACfb,gBAAAA,WAAW,CAACD,IAAZ,GAAmBc,IAAI,CAAC,WAAD,CAAJ,CAAkB,WAAlB,CAAnB;;AACA,qBAAK,IAAIC,GAAT,IAAgBD,IAAI,CAAC,8BAAD,CAApB,EAAsD;AAClDN,kBAAAA,yBAAyB,CAACQ,IAA1B,CAA+BD,GAA/B;AACAN,kBAAAA,yBAAyB,CAACO,IAA1B,CAA+BC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACL,IAAI,CAAC,8BAAD,CAAJ,CAAqCC,GAArC,EAA0C,mBAA1C,CAAD,CAAjB,CAA/B;AAEH,iBANc,CAOP;;;AACR,qBAAK,IAAIK,CAAC,GAAGZ,yBAAyB,CAACa,MAAvC,EAA+CD,CAAC,IAAI,CAApD,EAAuDA,CAAC,EAAxD,EAA4D;AACxDnB,kBAAAA,WAAW,CAACG,UAAZ,CAAuBY,IAAvB,CAA4B;AAACM,oBAAAA,CAAC,EAAEb,yBAAyB,CAACW,CAAD,CAA7B;AAAkCG,oBAAAA,KAAK,EAAEf,yBAAyB,CAACY,CAAD;AAAlE,mBAA5B;AAAoG;AACvG,eAjBC,CAfR;;AAAA;AAAA,+CAoCWnB,WApCX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAd;AAwCA,eAAeH,KAAf","sourcesContent":["// mb define apikey\r\n\r\nconst Stock = {\r\n            async fetchStock(name) {\r\n                let stockObject={\r\n                    type: \"line\",\r\n                    showInLegend: true,\r\n                    name: '',\r\n                    dataPoints: []\r\n                };\r\n                const pointerToThis = this;\r\n                // console.log(pointerToThis);\r\n                const API_KEY = '740WRQPFQK10PTAG';\r\n                let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${name}&apikey=${API_KEY}`;\r\n                let stockChartXValuesFunction = [];\r\n                let stockChartYValuesFunction = [];\r\n            \r\n                await fetch(API_Call)\r\n                .then(\r\n                    function(response) {\r\n                    return response.json();\r\n                    }\r\n                ) /* actually fetching data */\r\n                .then(\r\n                    function(data) {\t\r\n                    stockObject.name = data['Meta Data'][\"2. Symbol\"] ;\r\n                    for (var key in data['Monthly Adjusted Time Series']) {\r\n                        stockChartXValuesFunction.push(key);\r\n                        stockChartYValuesFunction.push(Math.floor(Number(data['Monthly Adjusted Time Series'][key]['5. adjusted close'])));\r\n                        \r\n                    }\r\n                            // pushing them in the state\r\n                    for (let i = stockChartXValuesFunction.length; i >= 0; i--) {\r\n                        stockObject.dataPoints.push({y: stockChartYValuesFunction[i], label: stockChartXValuesFunction[i]})}     \r\n                    }\r\n                    \r\n                  )\r\n                  \r\n                  return stockObject\r\n              }        \r\n}\r\n\r\nexport default Stock"]},"metadata":{},"sourceType":"module"}