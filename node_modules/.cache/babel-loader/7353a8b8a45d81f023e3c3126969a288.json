{"ast":null,"code":"// mb define apikey\n// second API key = 'HGJWFG4N8AQ66ICD'\nimport { counter } from '../Multiseries Chart';\nvar Stock = {\n  fetchStock: function fetchStock(name) {\n    var stockObject = {\n      type: \"line\",\n      xValueFormatString: \"MMM YYYY\",\n      prefix: \"$\",\n      showInLegend: true,\n      name: '',\n      dataPoints: []\n    };\n    var growthObject = {\n      type: \"area\",\n      showInLegend: true,\n      axisYType: \"secondary\",\n      suffix: \"%\",\n      visible: false,\n      name: '',\n      dataPoints: []\n    }; // console.log(pointerToThis);\n\n    var API_KEY1 = '740WRQPFQK10PTAG';\n    var API_KEY2 = 'HGJWFG4N8AQ66ICD';\n    var API_Call = \"https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=\".concat(name, \"&apikey=\").concat(counter % 10 <= 5 ? API_KEY1 : API_KEY2);\n    var stockChartXValuesFunction = [];\n    var stockChartYValuesFunction = [];\n    fetch(API_Call).then(function (response) {\n      return response.json();\n    })\n    /* actually fetching data */\n    .then(function (data) {\n      console.log();\n      stockObject.name = data['Meta Data'][\"2. Symbol\"];\n      growthObject.name = data['Meta Data'][\"2. Symbol\"] + '%';\n\n      for (var key in data['Monthly Adjusted Time Series']) {\n        stockChartXValuesFunction.push(key);\n        stockChartYValuesFunction.push(parseInt(data['Monthly Adjusted Time Series'][key]['5. adjusted close']));\n      } // pushing them in the object\n\n\n      for (var i = 0; i < stockChartXValuesFunction.length; i++) {\n        stockObject.dataPoints.push({\n          y: stockChartYValuesFunction[i],\n          label: stockChartXValuesFunction[i]\n        });\n      } // ================================\n\n\n      for (var _i = 0; _i < stockChartXValuesFunction.length; _i++) {\n        growthObject.dataPoints.push({\n          y: stockChartYValuesFunction[_i] / stockChartYValuesFunction[stockChartYValuesFunction.length - 1] * 100,\n          label: stockChartXValuesFunction[_i]\n        });\n      }\n    });\n    return [stockObject, growthObject];\n  }\n};\nexport default Stock;","map":{"version":3,"sources":["C:\\Users\\misha\\Desktop\\site\\trying\\STOCK_APP\\Stock-tracking-app\\src\\views\\userInputFunction\\userInputFunction.jsx"],"names":["counter","Stock","fetchStock","name","stockObject","type","xValueFormatString","prefix","showInLegend","dataPoints","growthObject","axisYType","suffix","visible","API_KEY1","API_KEY2","API_Call","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","data","console","log","key","push","parseInt","i","length","y","label"],"mappings":"AAAA;AACA;AACA,SAAQA,OAAR,QAAsB,sBAAtB;AAEA,IAAMC,KAAK,GAAG;AACFC,EAAAA,UADE,sBACSC,IADT,EACe;AACb,QAAIC,WAAW,GAAC;AACZC,MAAAA,IAAI,EAAE,MADM;AAEZC,MAAAA,kBAAkB,EAAE,UAFR;AAGZC,MAAAA,MAAM,EAAE,GAHI;AAIZC,MAAAA,YAAY,EAAE,IAJF;AAKZL,MAAAA,IAAI,EAAE,EALM;AAMZM,MAAAA,UAAU,EAAE;AANA,KAAhB;AASA,QAAIC,YAAY,GAAC;AACbL,MAAAA,IAAI,EAAE,MADO;AAEbG,MAAAA,YAAY,EAAE,IAFD;AAGbG,MAAAA,SAAS,EAAE,WAHE;AAIbC,MAAAA,MAAM,EAAE,GAJK;AAKbC,MAAAA,OAAO,EAAG,KALG;AAMbV,MAAAA,IAAI,EAAE,EANO;AAObM,MAAAA,UAAU,EAAE;AAPC,KAAjB,CAVa,CAqBb;;AACA,QAAMK,QAAQ,GAAG,kBAAjB;AACA,QAAMC,QAAQ,GAAG,kBAAjB;AAEA,QAAIC,QAAQ,4FAAqFb,IAArF,qBAAoGH,OAAO,GAAC,EAAR,IAAY,CAAZ,GAAcc,QAAd,GAAuBC,QAA3H,CAAZ;AACA,QAAIE,yBAAyB,GAAG,EAAhC;AACA,QAAIC,yBAAyB,GAAG,EAAhC;AAEAC,IAAAA,KAAK,CAACH,QAAD,CAAL,CACCI,IADD,CAEI,UAASC,QAAT,EAAmB;AACnB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACC,KAJL;AAKE;AALF,KAMCF,IAND,CAOI,UAASG,IAAT,EAAe;AACXC,MAAAA,OAAO,CAACC,GAAR;AAEHrB,MAAAA,WAAW,CAACD,IAAZ,GAAmBoB,IAAI,CAAC,WAAD,CAAJ,CAAkB,WAAlB,CAAnB;AACDb,MAAAA,YAAY,CAACP,IAAb,GAAoBoB,IAAI,CAAC,WAAD,CAAJ,CAAkB,WAAlB,IAAiC,GAArD;;AACA,WAAK,IAAIG,GAAT,IAAgBH,IAAI,CAAC,8BAAD,CAApB,EAAsD;AAClDN,QAAAA,yBAAyB,CAACU,IAA1B,CAA+BD,GAA/B;AACAR,QAAAA,yBAAyB,CAACS,IAA1B,CAA+BC,QAAQ,CAACL,IAAI,CAAC,8BAAD,CAAJ,CAAqCG,GAArC,EAA0C,mBAA1C,CAAD,CAAvC;AAEH,OATc,CAUP;;;AACR,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAGZ,yBAAyB,CAACa,MAA/C,EAAuDD,CAAC,EAAxD,EAA4D;AACxDzB,QAAAA,WAAW,CAACK,UAAZ,CAAuBkB,IAAvB,CAA4B;AAACI,UAAAA,CAAC,EAAEb,yBAAyB,CAACW,CAAD,CAA7B;AAAkCG,UAAAA,KAAK,EAAEf,yBAAyB,CAACY,CAAD;AAAlE,SAA5B;AAAoG,OAZzF,CAaf;;;AAEA,WAAK,IAAIA,EAAC,GAAG,CAAb,EAAiBA,EAAC,GAAGZ,yBAAyB,CAACa,MAA/C,EAAuDD,EAAC,EAAxD,EAA4D;AACxDnB,QAAAA,YAAY,CAACD,UAAb,CAAwBkB,IAAxB,CAA6B;AAACI,UAAAA,CAAC,EAAGb,yBAAyB,CAACW,EAAD,CAAzB,GACDX,yBAAyB,CAACA,yBAAyB,CAACY,MAA1B,GAAmC,CAApC,CADxB,GACgE,GADrE;AAEIE,UAAAA,KAAK,EAAEf,yBAAyB,CAACY,EAAD;AAFpC,SAA7B;AAEuE;AAE1E,KA3BL;AA8BE,WAAO,CAACzB,WAAD,EAAcM,YAAd,CAAP;AACH;AA7DD,CAAd;AAgEA,eAAeT,KAAf","sourcesContent":["// mb define apikey\r\n// second API key = 'HGJWFG4N8AQ66ICD'\r\nimport {counter} from '../Multiseries Chart'\r\n\r\nconst Stock = {\r\n            fetchStock(name) {\r\n                let stockObject={\r\n                    type: \"line\",\r\n                    xValueFormatString: \"MMM YYYY\",\r\n                    prefix: \"$\",\r\n                    showInLegend: true,\r\n                    name: '',\r\n                    dataPoints: []\r\n                };\r\n\r\n                let growthObject={\r\n                    type: \"area\",\r\n                    showInLegend: true,\r\n                    axisYType: \"secondary\",\r\n                    suffix: \"%\",\r\n                    visible : false,\r\n                    name: '',\r\n                    dataPoints: []\r\n                };\r\n                \r\n                \r\n                // console.log(pointerToThis);\r\n                const API_KEY1 = '740WRQPFQK10PTAG';\r\n                const API_KEY2 = 'HGJWFG4N8AQ66ICD';\r\n\r\n                let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${name}&apikey=${counter%10<=5?API_KEY1:API_KEY2}`;\r\n                let stockChartXValuesFunction = [];\r\n                let stockChartYValuesFunction = [];\r\n            \r\n                fetch(API_Call)\r\n                .then(\r\n                    function(response) {\r\n                    return response.json();\r\n                    }\r\n                ) /* actually fetching data */\r\n                .then(\r\n                    function(data) {\t\r\n                        console.log();\r\n                        \r\n                     stockObject.name = data['Meta Data'][\"2. Symbol\"] ;\r\n                    growthObject.name = data['Meta Data'][\"2. Symbol\"] + '%' ;\r\n                    for (var key in data['Monthly Adjusted Time Series']) {\r\n                        stockChartXValuesFunction.push(key);\r\n                        stockChartYValuesFunction.push(parseInt(data['Monthly Adjusted Time Series'][key]['5. adjusted close']));\r\n                        \r\n                    }\r\n                            // pushing them in the object\r\n                    for (let i = 0;  i < stockChartXValuesFunction.length; i++) {\r\n                        stockObject.dataPoints.push({y: stockChartYValuesFunction[i], label: stockChartXValuesFunction[i]})}     \r\n                    // ================================\r\n\r\n                    for (let i = 0;  i < stockChartXValuesFunction.length; i++) {\r\n                        growthObject.dataPoints.push({y: (stockChartYValuesFunction[i]/\r\n                                                         stockChartYValuesFunction[stockChartYValuesFunction.length - 1] *100 ),\r\n                                                         label: stockChartXValuesFunction[i]})}  \r\n                    \r\n                    }\r\n                  )\r\n                  \r\n                  return [stockObject, growthObject]\r\n              }        \r\n}\r\n\r\nexport default Stock"]},"metadata":{},"sourceType":"module"}