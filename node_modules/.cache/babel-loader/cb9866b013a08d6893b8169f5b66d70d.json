{"ast":null,"code":"// mb define apikey\n// second API key = 'HGJWFG4N8AQ66ICD'\nvar Stock = {\n  // fetchStock(name) {\n  //     let stockObject={\n  //         type: \"line\",\n  //         xValueFormatString: \"MMM YYYY\",\n  //         showInLegend: true,\n  //         name: '',\n  //         dataPoints: []\n  //     };\n  //     // console.log(pointerToThis);\n  //     const API_KEY = '740WRQPFQK10PTAG';\n  //     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${name}&apikey=${API_KEY}`;\n  //     let stockChartXValuesFunction = [];\n  //     let stockChartYValuesFunction = [];\n  //     fetch(API_Call)\n  //     .then(\n  //         function(response) {\n  //         return response.json();\n  //         }\n  //     ) /* actually fetching data */\n  //     .then(\n  //         function(data) {\t\n  //         stockObject.name = data['Meta Data'][\"2. Symbol\"] ;\n  //         for (var key in data['Monthly Adjusted Time Series']) {\n  //             stockChartXValuesFunction.push(key);\n  //             stockChartYValuesFunction.push(Math.floor(Number(data['Monthly Adjusted Time Series'][key]['5. adjusted close'])));\n  //         }\n  //                 // pushing them in the state\n  //         for (let i = 0;  i <= stockChartXValuesFunction.length; i++) {\n  //             stockObject.dataPoints.push({y: stockChartYValuesFunction[i], label: stockChartXValuesFunction[i]})}     \n  //         }\n  //       )\n  //       return stockObject\n  //   }        \n  fetchStock: function fetchStock(name) {\n    var stockObject = {\n      type: \"area\",\n      // xValueFormatString: \"MMM YYYY\",\n      showInLegend: true,\n      name: '',\n      dataPoints: []\n    }; // console.log(pointerToThis);\n\n    var API_KEY = '740WRQPFQK10PTAG';\n    var API_Call = \"https://www.alphavantage.co/query?function=MOM&symbol=\".concat(name, \"&interval=weekly&time_period=10&series_type=close&apikey=\").concat(API_KEY);\n    var stockChartXValuesFunction = [];\n    var stockChartYValuesFunction = [];\n    fetch(API_Call).then(function (response) {\n      return response.json();\n    })\n    /* actually fetching data */\n    .then(function (data) {\n      stockObject.name = data[\"Meta Data\"][\"1. Symbol\"];\n\n      for (var key in data[\"Technical Analysis: MOM\"]) {\n        stockChartXValuesFunction.push(key);\n        stockChartYValuesFunction.push(data[\"Technical Analysis: MOM\"][key][\"MOM\"]);\n      } // pushing them in the state\n\n\n      for (var i = 0; i <= stockChartXValuesFunction.length; i++) {\n        stockObject.dataPoints.push({\n          y: stockChartYValuesFunction[i],\n          label: stockChartXValuesFunction[i]\n        });\n      }\n    });\n    return stockObject;\n  }\n};\nexport default Stock;","map":{"version":3,"sources":["C:\\Users\\misha\\Desktop\\site\\trying\\STOCK_APP\\Stock-tracking-app\\src\\views\\userInputFunction\\userInputFunction.jsx"],"names":["Stock","fetchStock","name","stockObject","type","showInLegend","dataPoints","API_KEY","API_Call","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","data","key","push","i","length","y","label"],"mappings":"AAAA;AACA;AAEA,IAAMA,KAAK,GAAG;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACAC,EAAAA,UAtCE,sBAsCSC,IAtCT,EAsCe;AACb,QAAIC,WAAW,GAAC;AACZC,MAAAA,IAAI,EAAE,MADM;AAEZ;AACAC,MAAAA,YAAY,EAAE,IAHF;AAIZH,MAAAA,IAAI,EAAE,EAJM;AAKZI,MAAAA,UAAU,EAAE;AALA,KAAhB,CADa,CAQb;;AACA,QAAMC,OAAO,GAAG,kBAAhB;AACA,QAAIC,QAAQ,mEAA4DN,IAA5D,sEAA4HK,OAA5H,CAAZ;AACA,QAAIE,yBAAyB,GAAG,EAAhC;AACA,QAAIC,yBAAyB,GAAG,EAAhC;AAEAC,IAAAA,KAAK,CAACH,QAAD,CAAL,CACCI,IADD,CAEI,UAASC,QAAT,EAAmB;AACnB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACC,KAJL;AAKE;AALF,KAMCF,IAND,CAOI,UAASG,IAAT,EAAe;AACfZ,MAAAA,WAAW,CAACD,IAAZ,GAAmBa,IAAI,CAAC,WAAD,CAAJ,CAAkB,WAAlB,CAAnB;;AACA,WAAK,IAAIC,GAAT,IAAgBD,IAAI,CAAC,yBAAD,CAApB,EAAiD;AAC7CN,QAAAA,yBAAyB,CAACQ,IAA1B,CAA+BD,GAA/B;AACAN,QAAAA,yBAAyB,CAACO,IAA1B,CAA+BF,IAAI,CAAC,yBAAD,CAAJ,CAAgCC,GAAhC,EAAqC,KAArC,CAA/B;AAEH,OANc,CAOP;;;AACR,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAiBA,CAAC,IAAIT,yBAAyB,CAACU,MAAhD,EAAwDD,CAAC,EAAzD,EAA6D;AACzDf,QAAAA,WAAW,CAACG,UAAZ,CAAuBW,IAAvB,CAA4B;AAACG,UAAAA,CAAC,EAAEV,yBAAyB,CAACQ,CAAD,CAA7B;AAAkCG,UAAAA,KAAK,EAAEZ,yBAAyB,CAACS,CAAD;AAAlE,SAA5B;AAAoG;AACvG,KAjBL;AAqBE,WAAOf,WAAP;AACH;AA1ED,CAAd;AA6EA,eAAeH,KAAf","sourcesContent":["// mb define apikey\r\n// second API key = 'HGJWFG4N8AQ66ICD'\r\n\r\nconst Stock = {\r\n            // fetchStock(name) {\r\n            //     let stockObject={\r\n            //         type: \"line\",\r\n            //         xValueFormatString: \"MMM YYYY\",\r\n            //         showInLegend: true,\r\n            //         name: '',\r\n            //         dataPoints: []\r\n            //     };\r\n            //     // console.log(pointerToThis);\r\n            //     const API_KEY = '740WRQPFQK10PTAG';\r\n            //     let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${name}&apikey=${API_KEY}`;\r\n            //     let stockChartXValuesFunction = [];\r\n            //     let stockChartYValuesFunction = [];\r\n            \r\n            //     fetch(API_Call)\r\n            //     .then(\r\n            //         function(response) {\r\n            //         return response.json();\r\n            //         }\r\n            //     ) /* actually fetching data */\r\n            //     .then(\r\n            //         function(data) {\t\r\n            //         stockObject.name = data['Meta Data'][\"2. Symbol\"] ;\r\n            //         for (var key in data['Monthly Adjusted Time Series']) {\r\n            //             stockChartXValuesFunction.push(key);\r\n            //             stockChartYValuesFunction.push(Math.floor(Number(data['Monthly Adjusted Time Series'][key]['5. adjusted close'])));\r\n                        \r\n            //         }\r\n            //                 // pushing them in the state\r\n            //         for (let i = 0;  i <= stockChartXValuesFunction.length; i++) {\r\n            //             stockObject.dataPoints.push({y: stockChartYValuesFunction[i], label: stockChartXValuesFunction[i]})}     \r\n            //         }\r\n                    \r\n            //       )\r\n                  \r\n            //       return stockObject\r\n            //   }        \r\n            fetchStock(name) {\r\n                let stockObject={\r\n                    type: \"area\",\r\n                    // xValueFormatString: \"MMM YYYY\",\r\n                    showInLegend: true,\r\n                    name: '',\r\n                    dataPoints: []\r\n                };\r\n                // console.log(pointerToThis);\r\n                const API_KEY = '740WRQPFQK10PTAG';\r\n                let API_Call = `https://www.alphavantage.co/query?function=MOM&symbol=${name}&interval=weekly&time_period=10&series_type=close&apikey=${API_KEY}`;\r\n                let stockChartXValuesFunction = [];\r\n                let stockChartYValuesFunction = [];\r\n            \r\n                fetch(API_Call)\r\n                .then(\r\n                    function(response) {\r\n                    return response.json();\r\n                    }\r\n                ) /* actually fetching data */\r\n                .then(\r\n                    function(data) {\t                                                                        \r\n                    stockObject.name = data[\"Meta Data\"][\"1. Symbol\"] ;\r\n                    for (var key in data[\"Technical Analysis: MOM\"]) {\r\n                        stockChartXValuesFunction.push(key);\r\n                        stockChartYValuesFunction.push(data[\"Technical Analysis: MOM\"][key][\"MOM\"]);\r\n                        \r\n                    }\r\n                            // pushing them in the state\r\n                    for (let i = 0;  i <= stockChartXValuesFunction.length; i++) {\r\n                        stockObject.dataPoints.push({y: stockChartYValuesFunction[i], label: stockChartXValuesFunction[i]})}     \r\n                    }\r\n                    \r\n                  )\r\n                  \r\n                  return stockObject\r\n              }        \r\n}\r\n\r\nexport default Stock"]},"metadata":{},"sourceType":"module"}