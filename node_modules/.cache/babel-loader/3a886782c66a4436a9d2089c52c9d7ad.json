{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\trying canvas from 0(map sized)\\\\stock_app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\trying canvas from 0(map sized)\\\\stock_app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\n// mb define apikey\nfunction fetchStock(_x) {\n  return _fetchStock.apply(this, arguments);\n}\n\nfunction _fetchStock() {\n  _fetchStock = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(name) {\n    var stockObject, pointerToThis, API_KEY, API_Call, stockChartXValuesFunction, stockChartYValuesFunction;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            stockObject = {\n              type: \"line\",\n              showInLegend: true,\n              name: '',\n              dataPoints: []\n            };\n            pointerToThis = this; // console.log(pointerToThis);\n\n            API_KEY = '740WRQPFQK10PTAG';\n            API_Call = \"https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=\".concat(name, \"&apikey=\").concat(API_KEY);\n            stockChartXValuesFunction = [];\n            stockChartYValuesFunction = [];\n            _context.next = 8;\n            return fetch(API_Call).then(function (response) {\n              return response.json();\n            })\n            /* actually fetching data */\n            .then(function (data) {\n              stockObject.name = data['Meta Data'][\"2. Symbol\"];\n\n              for (var key in data['Monthly Adjusted Time Series']) {\n                stockChartXValuesFunction.push(key);\n                stockChartYValuesFunction.push(Math.floor(Number(data['Monthly Adjusted Time Series'][key]['5. adjusted close'])));\n              } // pushing them in the state\n\n\n              for (var i = stockChartXValuesFunction.length; i >= 0; i--) {\n                stockObject.dataPoints.push({\n                  y: stockChartYValuesFunction[i],\n                  label: stockChartXValuesFunction[i]\n                });\n              }\n            });\n\n          case 8:\n            return _context.abrupt(\"return\", stockObject);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _fetchStock.apply(this, arguments);\n}\n\nexport default Stock;","map":{"version":3,"sources":["C:\\Users\\misha\\Desktop\\site\\trying\\STOCK_APP\\trying canvas from 0(map sized)\\stock_app\\src\\views\\userInputFunction\\userInputFunction.jsx"],"names":["fetchStock","name","stockObject","type","showInLegend","dataPoints","pointerToThis","API_KEY","API_Call","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","data","key","push","Math","floor","Number","i","length","y","label","Stock"],"mappings":";;;AAAA;SAIeA,U;;;;;;;2BAAf,iBAA0BC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,YAAAA,WADR,GACoB;AACZC,cAAAA,IAAI,EAAE,MADM;AAEZC,cAAAA,YAAY,EAAE,IAFF;AAGZH,cAAAA,IAAI,EAAE,EAHM;AAIZI,cAAAA,UAAU,EAAE;AAJA,aADpB;AAOsBC,YAAAA,aAPtB,GAOsC,IAPtC,EAQgB;;AACMC,YAAAA,OATtB,GASgC,kBAThC;AAUoBC,YAAAA,QAVpB,4FAUiHP,IAVjH,qBAUgIM,OAVhI;AAWoBE,YAAAA,yBAXpB,GAWgD,EAXhD;AAYoBC,YAAAA,yBAZpB,GAYgD,EAZhD;AAAA;AAAA,mBAcsBC,KAAK,CAACH,QAAD,CAAL,CACLI,IADK,CAEF,UAASC,QAAT,EAAmB;AACnB,qBAAOA,QAAQ,CAACC,IAAT,EAAP;AACC,aAJC;AAKJ;AALI,aAMLF,IANK,CAOF,UAASG,IAAT,EAAe;AACfb,cAAAA,WAAW,CAACD,IAAZ,GAAmBc,IAAI,CAAC,WAAD,CAAJ,CAAkB,WAAlB,CAAnB;;AACA,mBAAK,IAAIC,GAAT,IAAgBD,IAAI,CAAC,8BAAD,CAApB,EAAsD;AAClDN,gBAAAA,yBAAyB,CAACQ,IAA1B,CAA+BD,GAA/B;AACAN,gBAAAA,yBAAyB,CAACO,IAA1B,CAA+BC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACL,IAAI,CAAC,8BAAD,CAAJ,CAAqCC,GAArC,EAA0C,mBAA1C,CAAD,CAAjB,CAA/B;AAEH,eANc,CAOP;;;AACR,mBAAK,IAAIK,CAAC,GAAGZ,yBAAyB,CAACa,MAAvC,EAA+CD,CAAC,IAAI,CAApD,EAAuDA,CAAC,EAAxD,EAA4D;AACxDnB,gBAAAA,WAAW,CAACG,UAAZ,CAAuBY,IAAvB,CAA4B;AAACM,kBAAAA,CAAC,EAAEb,yBAAyB,CAACW,CAAD,CAA7B;AAAkCG,kBAAAA,KAAK,EAAEf,yBAAyB,CAACY,CAAD;AAAlE,iBAA5B;AAAoG;AACvG,aAjBC,CAdtB;;AAAA;AAAA,6CAkCyBnB,WAlCzB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAsCA,eAAeuB,KAAf","sourcesContent":["// mb define apikey\r\n\r\n\r\n\r\nasync function fetchStock(name) {\r\n    let stockObject={\r\n        type: \"line\",\r\n        showInLegend: true,\r\n        name: '',\r\n        dataPoints: []\r\n    };\r\n                const pointerToThis = this;\r\n                // console.log(pointerToThis);\r\n                const API_KEY = '740WRQPFQK10PTAG';\r\n                let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${name}&apikey=${API_KEY}`;\r\n                let stockChartXValuesFunction = [];\r\n                let stockChartYValuesFunction = [];\r\n            \r\n                await fetch(API_Call)\r\n                .then(\r\n                    function(response) {\r\n                    return response.json();\r\n                    }\r\n                ) /* actually fetching data */\r\n                .then(\r\n                    function(data) {\t\r\n                    stockObject.name = data['Meta Data'][\"2. Symbol\"] ;\r\n                    for (var key in data['Monthly Adjusted Time Series']) {\r\n                        stockChartXValuesFunction.push(key);\r\n                        stockChartYValuesFunction.push(Math.floor(Number(data['Monthly Adjusted Time Series'][key]['5. adjusted close'])));\r\n                        \r\n                    }\r\n                            // pushing them in the state\r\n                    for (let i = stockChartXValuesFunction.length; i >= 0; i--) {\r\n                        stockObject.dataPoints.push({y: stockChartYValuesFunction[i], label: stockChartXValuesFunction[i]})}     \r\n                    }\r\n                    \r\n                  )                  \r\n                  return stockObject\r\n}\r\n              \r\n\r\nexport default Stock"]},"metadata":{},"sourceType":"module"}