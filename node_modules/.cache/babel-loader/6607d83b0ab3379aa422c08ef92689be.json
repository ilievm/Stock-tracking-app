{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\Stock-tracking-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\Stock-tracking-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\Stock-tracking-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\Stock-tracking-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\Stock-tracking-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\Stock-tracking-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\Stock-tracking-app\\\\src\\\\views\\\\Multiseries Chart.jsx\";\nimport React, { Component } from 'react';\nimport './styles.css';\nimport CanvasJSReact from '../assets/canvasjs.react';\nimport { Stock, counter } from \"./userInputFunction/userInputFunction\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nvar options;\nvar searchTearm;\n\nvar MultiseriesChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MultiseriesChart, _Component);\n\n  function MultiseriesChart(props) {\n    var _this;\n\n    _classCallCheck(this, MultiseriesChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiseriesChart).call(this, props));\n    _this.state = {\n      stockChartXValues: [],\n      stockChartYValues: [] //   where do we write info from the api\n\n    };\n    _this.pushData = _this.pushData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSearch = _this.handleSearch.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.testlog = _this.testlog.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MultiseriesChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchStock();\n    } //   reading api on start\n\n  }, {\n    key: \"fetchStock\",\n    value: function fetchStock() {\n      var pointerToThis = this; // console.log(pointerToThis);\n\n      var API_KEY = '740WRQPFQK10PTAG';\n      var StockSymbol = 'INX';\n      var API_Call = \"https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=\".concat(StockSymbol, \"&apikey=\").concat(API_KEY);\n      var stockChartXValuesFunction = [];\n      var stockChartYValuesFunction = [];\n      fetch(API_Call).then(function (response) {\n        return response.json();\n      })\n      /* actually fetching data */\n      .then(function (data) {\n        for (var key in data['Monthly Adjusted Time Series']) {\n          stockChartXValuesFunction.push(key);\n          stockChartYValuesFunction.push(Math.floor(Number(data['Monthly Adjusted Time Series'][key]['5. adjusted close'])));\n        } // pushing them in the state\n\n\n        pointerToThis.setState({\n          stockChartXValues: stockChartXValuesFunction,\n          stockChartYValues: stockChartYValuesFunction //  /\\state.............../\\value from the function above\n\n        }); //   console.log(pointerToThis.state);\n      });\n    } // iterates over the function above and pushes values one by one to a new var and returns it\n\n  }, {\n    key: \"Stock1\",\n    value: function Stock1(param) {\n      var y = [];\n\n      for (var i = 0; i < this.state.stockChartXValues.length; i++) {\n        y.push({\n          y: this.state.stockChartYValues[i],\n          label: this.state.stockChartXValues[i]\n        });\n      }\n\n      return y; // iterates over state and one by one pushing stock to Y on command. then called from render to chart the line\n    }\n  }, {\n    key: \"rerenderOnUpd\",\n    value: function rerenderOnUpd() {\n      this.chart.render();\n    }\n  }, {\n    key: \"handleSearch\",\n    value: function handleSearch(event) {\n      searchTearm = event.target.value.toUpperCase();\n    } // assigns to searchTerm whatever is in typed in the input field\n\n  }, {\n    key: \"enterPressed\",\n    value: function enterPressed(event) {\n      var code = event.keyCode || event.which;\n\n      if (code === 13) {\n        //13 is the enter keycode\n        this.pushData();\n      }\n    }\n  }, {\n    key: \"pushData\",\n    value: function pushData() {\n      var _this2 = this;\n\n      var receivedObjects = Stock.fetchStock(searchTearm); // calling fetchStock from imported \"userinput\" file\n\n      options.data.push(receivedObjects[0]);\n      options.data.push(receivedObjects[1]);\n      ++counter;\n      console.log(counter); // this.chart.render();\n\n      this.addStock.value = \"\";\n      setTimeout(function () {\n        _this2.rerenderOnUpd();\n\n        console.log('updated');\n      }, 800);\n      setTimeout(function () {\n        _this2.rerenderOnUpd();\n\n        console.log('updated');\n      }, 1800);\n      setTimeout(function () {\n        _this2.rerenderOnUpd();\n\n        console.log('updated');\n      }, 2500); // rerendering chart to ensure that if stock takes a lot of time to render it will appear\t\t\n    }\n  }, {\n    key: \"testlog\",\n    value: function testlog() {\n      console.log(Stock.fetchStock('INX'));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      // initial charts below\n      options = {\n        backgroundColor: '#f2f1f0',\n        animationEnabled: true,\n        zoomEnabled: true,\n        exportEnabled: true,\n        title: {\n          text: \"Stock Perfomance\"\n        },\n        axisX: {\n          reversed: true\n        },\n        axisY: {\n          title: \"Price(USD)\",\n          prefix: \"$\",\n          includeZero: true\n        },\n        axisY2: {\n          title: \"Percent\",\n          suffix: \"%\",\n          lineColor: \"#C0504E\",\n          tickColor: \"#C0504E\",\n          labelFontColor: \"#C0504E\"\n        },\n        toolTip: {\n          shared: true\n        },\n        data: [{\n          type: \"line\",\n          name: 'INX',\n          xValueFormatString: \"MMM YYYY\",\n          showInLegend: true,\n          dataPoints: this.Stock1()\n        }]\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"React Multiseries Chart\"), React.createElement(CanvasJSChart, {\n        options: options,\n        onRef: function onRef(ref) {\n          return _this3.chart = ref;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"field-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"field-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"input-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"input-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: function ref(el) {\n          return _this3.addStock = el;\n        },\n        required: \"required\",\n        onChange: this.handleSearch,\n        onKeyPress: this.enterPressed.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Stock symbol\"), React.createElement(\"div\", {\n        className: \"bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"input-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"btn-bg bg-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"btn btn-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.pushData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \"Add stock\"))))));\n    }\n  }]);\n\n  return MultiseriesChart;\n}(Component);\n\nexport { MultiseriesChart, counter };","map":{"version":3,"sources":["C:\\Users\\misha\\Desktop\\site\\trying\\STOCK_APP\\Stock-tracking-app\\src\\views\\Multiseries Chart.jsx"],"names":["React","Component","CanvasJSReact","Stock","counter","CanvasJSChart","options","searchTearm","MultiseriesChart","props","state","stockChartXValues","stockChartYValues","pushData","bind","handleSearch","testlog","fetchStock","pointerToThis","API_KEY","StockSymbol","API_Call","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","data","key","push","Math","floor","Number","setState","param","y","i","length","label","chart","render","event","target","value","toUpperCase","code","keyCode","which","receivedObjects","console","log","addStock","setTimeout","rerenderOnUpd","backgroundColor","animationEnabled","zoomEnabled","exportEnabled","title","text","axisX","reversed","axisY","prefix","includeZero","axisY2","suffix","lineColor","tickColor","labelFontColor","toolTip","shared","type","name","xValueFormatString","showInLegend","dataPoints","Stock1","ref","el","enterPressed"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './styles.css';\r\nimport CanvasJSReact from '../assets/canvasjs.react';\r\nimport {Stock, counter} from \"./userInputFunction/userInputFunction\";\r\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\n\r\nlet options;\r\nlet searchTearm;\r\n\r\nclass MultiseriesChart extends Component {\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t  stockChartXValues: [],\r\n\t\t  stockChartYValues: []\r\n\t\t//   where do we write info from the api\r\n\t\t}\t\t\t\r\n\t\tthis.pushData=this.pushData.bind(this);\r\n\t\tthis.handleSearch=this.handleSearch.bind(this)\t\r\n\t\tthis.testlog=this.testlog.bind(this)\t\r\n\t  }\r\n\t\r\n\t  componentDidMount() {\r\n\t\tthis.fetchStock()\t\t\r\n\t  }\r\n\t//   reading api on start\r\n\t\r\n\t  fetchStock() {\r\n\t\tconst pointerToThis = this;\r\n\t\t// console.log(pointerToThis);\r\n\t\tconst API_KEY = '740WRQPFQK10PTAG';\r\n\t\tlet StockSymbol = 'INX';\r\n\t\tlet API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${StockSymbol}&apikey=${API_KEY}`;\r\n\t\tlet stockChartXValuesFunction = [];\r\n\t\tlet stockChartYValuesFunction = [];\r\n\t\r\n\t\tfetch(API_Call)\r\n\t\t  .then(\r\n\t\t\tfunction(response) {\r\n\t\t\t  return response.json();\r\n\t\t\t}\r\n\t\t  ) /* actually fetching data */\r\n\t\t  .then(\r\n\t\t\tfunction(data) {\t\t\t\t\t\r\n\t\t\t  for (var key in data['Monthly Adjusted Time Series']) {\r\n\t\t\t\tstockChartXValuesFunction.push(key);\r\n\t\t\t\tstockChartYValuesFunction.push(Math.floor(Number(data['Monthly Adjusted Time Series'][key]['5. adjusted close'])));\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t// pushing them in the state\r\n\t\t\t\r\n\t\t\t  pointerToThis.setState({\r\n\t\t\t\tstockChartXValues: stockChartXValuesFunction,\r\n\t\t\t\tstockChartYValues: stockChartYValuesFunction\r\n\t\t\t\t//  /\\state.............../\\value from the function above\r\n\t\t\t  })\r\n\t\t\t//   console.log(pointerToThis.state);\r\n\t\t\t  \r\n\t\t\t}\r\n\t\t  )\r\n\t  }\r\n\t// iterates over the function above and pushes values one by one to a new var and returns it\r\n\tStock1(param) {\r\n\t\tlet y = [];\r\n\t\tfor (let i = 0;  i < this.state.stockChartXValues.length; i++) {\r\n\t\t\ty.push({y: this.state.stockChartYValues[i], label: this.state.stockChartXValues[i]})}\r\n\t\treturn y\r\n\t// iterates over state and one by one pushing stock to Y on command. then called from render to chart the line\r\n\t}\r\n\r\n\trerenderOnUpd() {\r\n\t\tthis.chart.render()}\r\n\r\n\thandleSearch(event){\r\n\t\tsearchTearm = event.target.value.toUpperCase()}\r\n\t// assigns to searchTerm whatever is in typed in the input field\r\n\r\n\tenterPressed(event) {\r\n\t\tvar code = event.keyCode || event.which;\r\n\t\tif(code === 13) { //13 is the enter keycode\r\n\t\t\tthis.pushData()\r\n\t\t} \r\n\t}\r\n\r\n\t pushData(){\r\n\t\t const receivedObjects = Stock.fetchStock(searchTearm)\t\t \r\n\t\t // calling fetchStock from imported \"userinput\" file\r\n\t\toptions.data.push(receivedObjects[0]); \r\n\t\toptions.data.push(receivedObjects[1]); \r\n\t\t++counter;\r\n\t\tconsole.log(counter);\r\n\t\t\r\n\t\t// this.chart.render();\r\n\t\t\r\n\t\tthis.addStock.value = \"\";\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.rerenderOnUpd();\r\n\t\t\tconsole.log('updated');\r\n\t\t}, 800);\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.rerenderOnUpd();\r\n\t\t\tconsole.log('updated');\r\n\t\t}, 1800);\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.rerenderOnUpd();\r\n\t\t\tconsole.log('updated');\t\r\n\t\t}, 2500) \r\n\t\t// rerendering chart to ensure that if stock takes a lot of time to render it will appear\t\t\r\n\t}\r\n\r\n\ttestlog(){\r\n\t\tconsole.log(Stock.fetchStock('INX'));\r\n\t}\r\n\r\n\trender() {\r\n\t\t// initial charts below\r\n\t\t\toptions = {\r\n\t\t\t\tbackgroundColor: '#f2f1f0',\r\n\t\t\t\tanimationEnabled: true,\t\r\n\t\t\t\tzoomEnabled: true,\r\n\t\t\t\texportEnabled: true,\r\n\t\t\t\ttitle:{\r\n\t\t\t\t\ttext: \"Stock Perfomance\"\r\n\t\t\t\t},\r\n\t\t\t\taxisX:{\r\n\t\t\t\t\treversed: true,\r\n\t\t\t\t},\r\n\t\t\t\taxisY : {\r\n\t\t\t\t\ttitle: \"Price(USD)\",\r\n\t\t\t\t\tprefix: \"$\",\r\n\t\t\t\t\tincludeZero: true\r\n\t\r\n\t\t\t\t},\r\n\t\t\t\taxisY2: {\r\n\t\t\t\t\ttitle: \"Percent\",\r\n\t\t\t\t\tsuffix: \"%\",\r\n\t\t\t\t\tlineColor: \"#C0504E\",\r\n\t\t\t\t\ttickColor: \"#C0504E\",\r\n\t\t\t\t\tlabelFontColor: \"#C0504E\"\r\n\t\t\t\t},\r\n\t\t\t\ttoolTip: {\r\n\t\t\t\t\tshared: true\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tdata: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\t\tname: 'INX',\r\n\t\t\t\t\t\txValueFormatString: \"MMM YYYY\",\r\n\t\t\t\t\t\tshowInLegend: true,\r\n\t\t\t\t\t\tdataPoints: this.Stock1()\r\n\t\t\t\t\t}\r\n\t\t\t\t]}\r\n\r\n\t\t\t\t\r\n\t\treturn (\r\n\t\t\t<div /* style={thestyles} */>\r\n\t\t\t<h1>React Multiseries Chart</h1>\r\n\t\t\t<CanvasJSChart options = {options} \r\n\t\t\t\tonRef={ref => this.chart = ref}\t\t/>\r\n\t\t\t{/* You can get reference to the chart instance as shown above using onRef. This allows you to access all chart properties and methods */}\r\n\t\t\t<div className=\"field\"><div className=\"field-box\"/><div className=\"field-box\"/></div>\r\n\t\t\t<div className=\"input-box\">\r\n\t\t\t\t<div className=\"input-block\">\r\n\t\t\t\t\t<div className=\"group\">\r\n\t\t\t\t\t\t<input type=\"text\" id=\"name\" \r\n\t\t\t\t\t\t\t   ref={el => this.addStock = el} \r\n\t\t\t\t\t\t\t   required=\"required\" \r\n\t\t\t\t\t\t\t   onChange={this.handleSearch}\r\n\t\t\t\t\t\t\t   onKeyPress={this.enterPressed.bind(this)}\r\n\t\t\t\t\t\t />\r\n\t\t\t\t\t\t<label htmlFor=\"name\">Stock symbol</label>\r\n\t\t\t\t\t\t<div className=\"bar\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"input-block\">\r\n\t\t\t\t\t<div className=\"btn-bg bg-2\">\r\n\t\t\t\t\t\t\t<div className=\"btn btn-2\">\r\n\t\t\t\t\t\t\t\t<button onClick={this.pushData}>Add stock</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport {MultiseriesChart, counter};"]},"metadata":{},"sourceType":"module"}