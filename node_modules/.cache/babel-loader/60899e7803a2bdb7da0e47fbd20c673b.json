{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\trying canvas from 0(map sized)\\\\stock_app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\trying canvas from 0(map sized)\\\\stock_app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\trying canvas from 0(map sized)\\\\stock_app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\trying canvas from 0(map sized)\\\\stock_app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\trying canvas from 0(map sized)\\\\stock_app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\trying canvas from 0(map sized)\\\\stock_app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\trying canvas from 0(map sized)\\\\stock_app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\trying canvas from 0(map sized)\\\\stock_app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\misha\\\\Desktop\\\\site\\\\trying\\\\STOCK_APP\\\\trying canvas from 0(map sized)\\\\stock_app\\\\src\\\\views\\\\Multiseries Chart.jsx\";\nimport React, { Component } from 'react';\nimport './styles.css';\nimport CanvasJSReact from '../assets/canvasjs.react';\nimport Stock from \"./userInputFunction/userInputFunction\";\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart; // let thestyles = {\n// \tbackgroundColor: 'red',\n// width: '90vw', }\n\nvar options;\nvar searchTearm;\nvar dataPoints1;\nvar dataPoints2;\nvar dataPoints3;\nvar dataPoints4;\n\nvar MultiseriesChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MultiseriesChart, _Component);\n\n  function MultiseriesChart(props) {\n    var _this;\n\n    _classCallCheck(this, MultiseriesChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiseriesChart).call(this, props));\n    _this.state = {\n      stockChartXValues: [],\n      stockChartYValues: [] //   where do we write info from the api\n\n    };\n    _this.pushData = _this.pushData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSearch = _this.handleSearch.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.testlog = _this.testlog.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MultiseriesChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchStock();\n    } //   reading api on start\n\n  }, {\n    key: \"fetchStock\",\n    value: function fetchStock() {\n      var pointerToThis = this; // console.log(pointerToThis);\n\n      var API_KEY = '740WRQPFQK10PTAG';\n      var StockSymbol = 'INX';\n      var API_Call = \"https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=\".concat(StockSymbol, \"&apikey=\").concat(API_KEY);\n      var stockChartXValuesFunction = [];\n      var stockChartYValuesFunction = [];\n      fetch(API_Call).then(function (response) {\n        return response.json();\n      })\n      /* actually fetching data */\n      .then(function (data) {\n        for (var key in data['Monthly Adjusted Time Series']) {\n          stockChartXValuesFunction.push(key);\n          stockChartYValuesFunction.push(Math.floor(Number(data['Monthly Adjusted Time Series'][key]['5. adjusted close'])));\n        } // pushing them in the state\n\n\n        pointerToThis.setState({\n          stockChartXValues: stockChartXValuesFunction,\n          stockChartYValues: stockChartYValuesFunction //  /\\state.............../\\value from the function above\n\n        }); //   console.log(pointerToThis.state);\n      });\n    } // iterates over the function above and pushes values one by one to a new var and returns it\n\n  }, {\n    key: \"Stock1\",\n    value: function Stock1(param) {\n      var y = [];\n\n      for (var i = this.state.stockChartXValues.length; i >= 0; i--) {\n        y.push({\n          y: this.state.stockChartYValues[i],\n          label: this.state.stockChartXValues[i]\n        });\n      }\n\n      return y; // iterates over state and one by one pushing stock to Y on command. then called from render to chart the line\n    }\n  }, {\n    key: \"handleSearch\",\n    value: function handleSearch(event) {\n      searchTearm = event.target.value;\n    } // assigns to searchTerm whatever is in typed in the input field\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {}\n  }, {\n    key: \"pushData\",\n    value: function () {\n      var _pushData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = options.data;\n                _context.next = 3;\n                return Stock.fetchStock(searchTearm);\n\n              case 3:\n                _context.t1 = _context.sent;\n\n                _context.t0.push.call(_context.t0, _context.t1);\n\n                this.chart.render();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function pushData() {\n        return _pushData.apply(this, arguments);\n      }\n\n      return pushData;\n    }()\n  }, {\n    key: \"testlog\",\n    value: function testlog() {\n      console.log(Stock.fetchStock('INX'));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      options = {\n        animationEnabled: true,\n        zoomEnabled: true,\n        includeZero: false,\n        title: {\n          text: \"Stock Perfomance\"\n        },\n        axisY: {\n          title: \"Price(USD)\"\n        },\n        toolTip: {\n          shared: true\n        },\n        data: [\n        /* 1 */\n        {\n          type: \"line\",\n          name: \"date\",\n          showInLegend: true,\n          dataPoints: this.Stock1()\n        },\n        /* 2 */\n        {\n          type: \"line\",\n          name: \"2017\",\n          showInLegend: true,\n          dataPoints: null\n        },\n        /* 3 */\n        {\n          type: \"line\",\n          name: \"2017\",\n          showInLegend: true,\n          dataPoints: null\n        },\n        /* 4 */\n        {\n          type: \"line\",\n          name: \"2017\",\n          showInLegend: true,\n          dataPoints: null\n        }]\n      };\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"React Multiseries Chart\"), React.createElement(CanvasJSChart, {\n        options: options,\n        onRef: function onRef(ref) {\n          return _this2.chart = ref;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        placeholder: \"Search by index\",\n        onChange: this.handleSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"testbutton\",\n        onClick: this.pushData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"pushData\"));\n    }\n  }]);\n\n  return MultiseriesChart;\n}(Component);\n\nexport default MultiseriesChart;","map":{"version":3,"sources":["C:\\Users\\misha\\Desktop\\site\\trying\\STOCK_APP\\trying canvas from 0(map sized)\\stock_app\\src\\views\\Multiseries Chart.jsx"],"names":["React","Component","CanvasJSReact","Stock","CanvasJSChart","options","searchTearm","dataPoints1","dataPoints2","dataPoints3","dataPoints4","MultiseriesChart","props","state","stockChartXValues","stockChartYValues","pushData","bind","handleSearch","testlog","fetchStock","pointerToThis","API_KEY","StockSymbol","API_Call","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","data","key","push","Math","floor","Number","setState","param","y","i","length","label","event","target","value","chart","render","console","log","animationEnabled","zoomEnabled","includeZero","title","text","axisY","toolTip","shared","type","name","showInLegend","dataPoints","Stock1","ref"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './styles.css';\r\nimport CanvasJSReact from '../assets/canvasjs.react';\r\nimport Stock from \"./userInputFunction/userInputFunction\";\r\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\n\r\n \r\n// let thestyles = {\r\n// \tbackgroundColor: 'red',\r\n// width: '90vw', }\r\nlet options;\r\nlet searchTearm\r\n\r\nlet dataPoints1;\r\nlet dataPoints2;\r\nlet dataPoints3;\r\nlet dataPoints4;\r\n\r\nclass MultiseriesChart extends Component {\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t  stockChartXValues: [],\r\n\t\t  stockChartYValues: []\r\n\t\t//   where do we write info from the api\r\n\t\t}\t\t\t\r\n\t\tthis.pushData=this.pushData.bind(this);\r\n\t\tthis.handleSearch=this.handleSearch.bind(this)\t\r\n\t\tthis.testlog=this.testlog.bind(this)\t\r\n\t  }\r\n\t\r\n\t  componentDidMount() {\r\n\t\tthis.fetchStock()\t\t\r\n\t  }\r\n\t//   reading api on start\r\n\t\r\n\t  fetchStock() {\r\n\t\tconst pointerToThis = this;\r\n\t\t// console.log(pointerToThis);\r\n\t\tconst API_KEY = '740WRQPFQK10PTAG';\r\n\t\tlet StockSymbol = 'INX';\r\n\t\tlet API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=${StockSymbol}&apikey=${API_KEY}`;\r\n\t\tlet stockChartXValuesFunction = [];\r\n\t\tlet stockChartYValuesFunction = [];\r\n\t\r\n\t\tfetch(API_Call)\r\n\t\t  .then(\r\n\t\t\tfunction(response) {\r\n\t\t\t  return response.json();\r\n\t\t\t}\r\n\t\t  ) /* actually fetching data */\r\n\t\t  .then(\r\n\t\t\tfunction(data) {\t\t\t\t\t\r\n\t\t\t  for (var key in data['Monthly Adjusted Time Series']) {\r\n\t\t\t\tstockChartXValuesFunction.push(key);\r\n\t\t\t\tstockChartYValuesFunction.push(Math.floor(Number(data['Monthly Adjusted Time Series'][key]['5. adjusted close'])));\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t// pushing them in the state\r\n\t\t\t\r\n\t\t\t  pointerToThis.setState({\r\n\t\t\t\tstockChartXValues: stockChartXValuesFunction,\r\n\t\t\t\tstockChartYValues: stockChartYValuesFunction\r\n\t\t\t\t//  /\\state.............../\\value from the function above\r\n\t\t\t  })\r\n\t\t\t//   console.log(pointerToThis.state);\r\n\t\t\t  \r\n\t\t\t}\r\n\t\t  )\r\n\t  }\r\n\t// iterates over the function above and pushes values one by one to a new var and returns it\r\n\tStock1(param) {\r\n\t\tlet y = [];\r\n\t\tfor (let i = this.state.stockChartXValues.length; i >= 0; i--) {\r\n\t\t\ty.push({y: this.state.stockChartYValues[i], label: this.state.stockChartXValues[i]})}\r\n\t\treturn y\r\n\t// iterates over state and one by one pushing stock to Y on command. then called from render to chart the line\r\n\t}\r\n\r\n\thandleSearch(event){searchTearm = event.target.value}\r\n\t// assigns to searchTerm whatever is in typed in the input field\r\n\tcomponentDidUpdate(){\r\n\t}\r\n\r\n\tasync pushData(){\r\n\t\toptions.data.push(await Stock.fetchStock(searchTearm));\r\n\t\tthis.chart.render();\r\n\t}\r\n\r\n\ttestlog(){\r\n\t\tconsole.log(Stock.fetchStock('INX'));\r\n\t}\r\n\r\n\trender() {\r\n\t\t\toptions = {\r\n\t\t\t\tanimationEnabled: true,\t\r\n\t\t\t\tzoomEnabled: true,\r\n\t\t\t\tincludeZero: false,\r\n\t\t\t\ttitle:{\r\n\t\t\t\t\ttext: \"Stock Perfomance\"\r\n\t\t\t\t},\r\n\t\t\t\taxisY : {\r\n\t\t\t\t\ttitle: \"Price(USD)\",\r\n\t\r\n\t\t\t\t},\r\n\t\t\t\ttoolTip: {\r\n\t\t\t\t\tshared: true\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\tdata: [\r\n\t\t\t/* 1 */\t{\r\n\t\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\t\tname: \"date\",\r\n\t\t\t\t\t\tshowInLegend: true,\r\n\t\t\t\t\t\tdataPoints: this.Stock1()\r\n\t\t\t\t\t},\r\n\t\t\t/* 2 */\t{\r\n\t\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\t\tname: \"2017\",\r\n\t\t\t\t\t\tshowInLegend: true,\r\n\t\t\t\t\t\tdataPoints: null\r\n\t\t\t\t\t},\r\n\t\t\t/* 3 */\t{\r\n\t\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\t\tname: \"2017\",\r\n\t\t\t\t\t\tshowInLegend: true,\r\n\t\t\t\t\t\tdataPoints: null\r\n\t\t\t\t\t},\r\n\t\t\t/* 4 */\t{\r\n\t\t\t\t\t\ttype: \"line\",\r\n\t\t\t\t\t\tname: \"2017\",\r\n\t\t\t\t\t\tshowInLegend: true,\r\n\t\t\t\t\t\tdataPoints: null\r\n\t\t\t\t\t}\r\n\t\t\t\t]}\r\n\r\n\r\n\t\treturn (\r\n\t\t<div /* style={thestyles} */>\r\n\t\t\t<h1>React Multiseries Chart</h1>\r\n\t\t\t<CanvasJSChart options = {options} \r\n\t\t\t\tonRef={ref => this.chart = ref}\t\t/>\r\n\t\t\t{/* You can get reference to the chart instance as shown above using onRef. This allows you to access all chart properties and methods */}\r\n\t\t\t<input placeholder=\"Search by index\" onChange={this.handleSearch} /> \r\n\t\t\t<button className=\"testbutton\" onClick={this.pushData}>pushData</button>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default MultiseriesChart;"]},"metadata":{},"sourceType":"module"}